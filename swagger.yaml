openapi: 3.0.0

info:
  title: Flower Online Store Api
  version: 1.0.0
  description: Flower Online Store Api doc

servers:
  - url: http://localhost:8080/api
    description: Development server

tags:
  - name: Auth
  - name: Users
  - name: Products
  - name: Categories
  - name: Images

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  Schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "User Name"
        email:
          type: string
          example: "user@gmail.com"
        password:
          type: string
          example: "password"
        created_at:
          type: string
          example: "2025-05-22T01:52:29.000Z"
    Product:
      type: object
      properties:
        title:
          type: string
          example: "Product Title"
        description:
          type: string
          example: "Product Description"
        price:
          type: number
          example: 100
        category_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2025-05-22T01:52:29.000Z"
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Category Name"
        description:
          type: string
          example: "Category Description"
        created_at:
          type: string
          example: "2025-05-22T01:52:29.000Z"
    Image:
      type: object
      properties:
        id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        image_url:
          type: string
          example: "https://example.com/image.jpg"
  Responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad Request"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal Server Error"

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "example@gmail.com"
                password:
                  type: string
                  example: "examplepassword"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/Schemas/User"
        400:
          $ref: "#/components/Responses/BadRequest"
        500:
          $ref: "#/components/Responses/InternalServerError"
  /auth/login:
    post:
      summary: Logges in a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "example@gmail.com"
                password:
                  type: string
                  example: "examplepassword"
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "some token"
        400:
          $ref: "#/components/Responses/BadRequest"
        401:
          $ref: "#/components/Responses/Unauthorized"
        500:
          $ref: "#/components/Responses/InternalServerError"
  /users:
    get:
      security:
        - bearerAuth: []
      summary: Gets all the users with the query filters
      tags: 
        - Users
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          example: 1
        - in: query
          name: email
          schema:
            type: string
            example: "example@gmail.com"
      responses:
        200:
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: "#/components/Schemas/User"
        500:
          $ref: "#/components/Responses/InternalServerError"
  /users/{id}:
    delete:
      security:
        - bearerAuth: []
      summary: Deletes a user by id
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/Schemas/User"
        400:
          $ref: "#/components/Responses/BadRequest"
        404:
          $ref: "#/components/Responses/NotFound"
        500:
          $ref: "#/components/Responses/InternalServerError"
    put:
      security:
        - bearerAuth: []
      summary: Edits a user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: "example"
                email:
                  type: string
                  example: "example@gmail.com"
                password:
                  type: string
                  example: "examplepassword"
      responses:
        200:
          description: User edited successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/Schemas/User"
        400:
          $ref: "#/components/Responses/BadRequest"
        404:
          $ref: "#/components/Responses/NotFound"
        500:
          $ref: "#/components/Responses/InternalServerError"
  /products:
  /categories:
  /images: